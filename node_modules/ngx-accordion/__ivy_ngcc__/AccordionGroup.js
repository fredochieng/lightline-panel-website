"use strict";
var ɵngcc0 = require('@angular/core');
var ɵngcc1 = require('@angular/common');
var ɵngcc2 = require('./Accordion');

function AccordionGroup_a_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("aria-expanded", ctx_r0.isOpened);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.heading, " ");
} }
function AccordionGroup_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7)(1, "div", 8);
    ɵngcc0.ɵɵprojection(2, 1);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("aria-labelledby", ctx_r1.heading);
} }
var _c0 = [[["accordion-heading"]], "*"];
var _c1 = ["accordion-heading", "*"];
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = require("@angular/core");
var Accordion_1 = require("./Accordion");
var AccordionToggle_1 = require("./AccordionToggle");
var AccordionGroup = (function () {
    function AccordionGroup(accordion, cdr) {
        this.accordion = accordion;
        this.cdr = cdr;
        this.isOpened = false;
        this.onOpen = new core_1.EventEmitter();
        this.onClose = new core_1.EventEmitter();
        this.onToggle = new core_1.EventEmitter();
        this.disabled = false;
    }
    AccordionGroup.prototype.checkAndToggle = function () {
        // if custom toggle element is supplied, then do nothing, custom toggler will take care of it
        if (this.toggler)
            return;
        this.toggle();
    };
    AccordionGroup.prototype.toggle = function () {
        if (this.disabled)
            return;
        var isOpenedBeforeWeChange = this.isOpened;
        if (this.accordion.closeOthers)
            this.accordion.closeAll();
        this.isOpened = !isOpenedBeforeWeChange;
        if (this.isOpened) {
            this.onOpen.emit();
        }
        else {
            this.onClose.emit();
        }
        this.onToggle.emit(this.isOpened);
    };
    AccordionGroup.prototype.openOnInitialization = function () {
        this.isOpened = true;
        this.cdr.detectChanges();
    };
AccordionGroup.ɵfac = function AccordionGroup_Factory(t) { return new (t || AccordionGroup)(ɵngcc0.ɵɵdirectiveInject(core_1.forwardRef(function () { return Accordion_1.Accordion; }), 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
AccordionGroup.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AccordionGroup, selectors: [["accordion-group"]], contentQueries: function AccordionGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, AccordionToggle_1.AccordionToggle, 5);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.toggler = _t.first);
    } }, inputs: { isOpened: "isOpened", disabled: "disabled", heading: "heading" }, outputs: { onOpen: "onOpen", onClose: "onClose", onToggle: "onToggle" }, ngContentSelectors: _c1, decls: 7, vars: 8, consts: [[1, "panel", "panel-default"], ["role", "tab", 1, "panel-heading", 3, "click"], [1, "panel-title"], ["role", "button", "data-toggle", "collapse", 4, "ngIf"], [1, "caret"], ["class", "panel-collapse collapse in", "role", "tabpanel", 4, "ngIf"], ["role", "button", "data-toggle", "collapse"], ["role", "tabpanel", 1, "panel-collapse", "collapse", "in"], [1, "panel-body"]], template: function AccordionGroup_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
        ɵngcc0.ɵɵlistener("click", function AccordionGroup_Template_div_click_1_listener() { return ctx.checkAndToggle(); });
        ɵngcc0.ɵɵelementStart(2, "h4", 2);
        ɵngcc0.ɵɵtemplate(3, AccordionGroup_a_3_Template, 2, 2, "a", 3);
        ɵngcc0.ɵɵprojection(4);
        ɵngcc0.ɵɵelement(5, "div", 4);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵtemplate(6, AccordionGroup_div_6_Template, 3, 1, "div", 5);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("dropup", ctx.isOpened)("disabled", ctx.disabled);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.heading);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵstyleProp("display", ctx.accordion.showArrows ? "" : "none");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isOpened);
    } }, dependencies: [ɵngcc1.NgIf], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AccordionGroup, [{
        type: core_1.Component,
        args: [{
                selector: "accordion-group",
                template: "\n  <div class=\"panel panel-default\" [class.dropup]=\"isOpened\" [class.disabled]=\"disabled\">\n    <div class=\"panel-heading\" role=\"tab\" (click)=\"checkAndToggle()\">\n      <h4 class=\"panel-title\">\n        <a *ngIf=\"heading\" role=\"button\" data-toggle=\"collapse\" [attr.aria-expanded]=\"isOpened\">\n            {{ heading }}\n        </a>\n        <ng-content select=\"accordion-heading\"></ng-content>\n        <div class=\"caret\" [style.display]=\"accordion.showArrows ? '' : 'none'\">\n        </div>\n      </h4>\n    </div>\n    <div *ngIf=\"isOpened\" class=\"panel-collapse collapse in\" role=\"tabpanel\" [attr.aria-labelledby]=\"heading\">\n      <div class=\"panel-body\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  </div>\n"
            }]
    }], function () { return [{ type: ɵngcc2.Accordion, decorators: [{
                type: core_1.Host
            }, {
                type: core_1.Inject,
                args: [core_1.forwardRef(function () { return Accordion_1.Accordion; })]
            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { isOpened: [{
            type: core_1.Input
        }], onOpen: [{
            type: core_1.Output
        }], onClose: [{
            type: core_1.Output
        }], onToggle: [{
            type: core_1.Output
        }], disabled: [{
            type: core_1.Input
        }], heading: [{
            type: core_1.Input
        }], toggler: [{
            type: core_1.ContentChild,
            args: [AccordionToggle_1.AccordionToggle]
        }] }); })();
    return AccordionGroup;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AccordionGroup.prototype, "heading", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], AccordionGroup.prototype, "isOpened", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AccordionGroup.prototype, "onOpen", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AccordionGroup.prototype, "onClose", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AccordionGroup.prototype, "onToggle", void 0);
__decorate([
    core_1.ContentChild(AccordionToggle_1.AccordionToggle),
    __metadata("design:type", core_1.ElementRef)
], AccordionGroup.prototype, "toggler", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], AccordionGroup.prototype, "disabled", void 0);
AccordionGroup = __decorate([ __param(0, core_1.Host()), __param(0, core_1.Inject(core_1.forwardRef(function () { return Accordion_1.Accordion; }))),
    __metadata("design:paramtypes", [Accordion_1.Accordion,
        core_1.ChangeDetectorRef])
], AccordionGroup);
exports.AccordionGroup = AccordionGroup;

//# sourceMappingURL=AccordionGroup.js.map